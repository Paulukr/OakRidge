package library.model.dao.implemantation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.apache.log4j.Logger;

import library.controller.ErrorList;
import library.model.dao.DaoConstants;
import library.model.dao.declaration.AuthorDao;
import library.model.entity.Author;

public class AuthorDaoImpl extends AbstractDao implements AuthorDao {

    private static final Logger logger = Logger.getLogger(AbstractDao.class);

	@Override
	public boolean checkAvailability(String fullName) {
		try (Connection connection = getdataSource().getConnection();
				PreparedStatement preparedStatement = connection
						.prepareStatement(DaoConstants.AUTHOR_CHECK_AVAILABILITY);) {
			// (Author_name)
			preparedStatement.setString(1, fullName);
			try(ResultSet resultSet = preparedStatement.executeQuery()){

			if (resultSet.next()) {
				int result = resultSet.getInt(1);
				preparedStatement.close();

				if (result == 0)
					return false;
				if (result == 1)
					return true;
				else
					throw new Exception(ErrorList.DuplicateAuthors);

			} else {
				preparedStatement.close();
				throw new Exception(ErrorList.AbsentResultSet);
			}
			}
		} catch (Exception e) {
			logger.error(ErrorList.SelectAuthor, e);
			throw new RuntimeException(ErrorList.SelectAuthor, e);
		}
	}

	@Override
	public Integer getNo(String fullName) throws SQLException {
		try (Connection connection = getdataSource().getConnection();
				PreparedStatement preparedStatement = connection
						.prepareStatement(DaoConstants.AUTHOR_GET_NO);) {
			// (Author_name)
			preparedStatement.setString(1, fullName);
			ResultSet resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				int result = resultSet.getInt(1);
				preparedStatement.close();
				return result;
			} else {
				preparedStatement.close();
				throw new SQLException(ErrorList.AbsentResultSet);
			}
		} catch (SQLException e) {
			logger.error(ErrorList.SelectAuthor, e);
			throw new SQLException(ErrorList.SelectAuthor, e);
		}
	}

	@Override
	public Integer addAuthor(Author author) throws SQLException {
		try (Connection connection = getdataSource().getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement(DaoConstants.AUTHOR_GET_NO);) {
			// (Author_name)
			preparedStatement.setString(1, author.getName());
			try (ResultSet generatedKeys = preparedStatement.executeQuery()) {
				if (generatedKeys.next()) {
					return (generatedKeys.getInt(1));
				} else {
					throw new SQLException("Creating user failed, no ID obtained.");
				}
			}

		} catch (SQLException e) {
			logger.error(ErrorList.SelectAuthor, e);
			throw new SQLException(ErrorList.SelectAuthor, e);
		}
	}

}
